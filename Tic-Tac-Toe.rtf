{\rtf1\ansi\ansicpg1252\cocoartf2757
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 // Tic-Tac-Toe Console Game in Dart\
import 'dart:io';\
\
void main() \{\
  while (true) \{\
    playGame();\
    stdout.write('Do you want to play again? (yes/no): ');\
    String? again = stdin.readLineSync();\
    if (again?.toLowerCase() != 'yes') \{\
      print('Thanks for playing!');\
      break;\
    \}\
  \}\
\}\
\
// Main game logic\
void playGame() \{\
  List<String> board = List.filled(9, ' ');\
  String currentPlayer = 'X';\
\
  while (true) \{\
    displayBoard(board);\
    int move = getPlayerMove(board, currentPlayer);\
    board[move - 1] = currentPlayer;\
\
    if (checkWinner(board, currentPlayer)) \{\
      displayBoard(board);\
      print('\uc0\u55356 \u57225  Player $currentPlayer wins!');\
      break;\
    \} else if (isDraw(board)) \{\
      displayBoard(board);\
      print('\uc0\u55358 \u56605  The game is a draw.');\
      break;\
    \}\
\
    currentPlayer = currentPlayer == 'X' ? 'O' : 'X';\
  \}\
\}\
\
// Display current board state\
void displayBoard(List<String> board) \{\
  print('\\n');\
  for (int i = 0; i < 9; i += 3) \{\
    print(' $\{board[i]\} | $\{board[i + 1]\} | $\{board[i + 2]\} ');\
    if (i < 6) print('---+---+---');\
  \}\
  print('\\n');\
\}\
\
// Get and validate user input\
int getPlayerMove(List<String> board, String player) \{\
  while (true) \{\
    stdout.write('\uc0\u55356 \u57263  Player $player, choose a cell (1-9): ');\
    String? input = stdin.readLineSync();\
    int? move = int.tryParse(input ?? '');\
\
    if (move != null && move >= 1 && move <= 9 && board[move - 1] == ' ') \{\
      return move;\
    \} else \{\
      print('\uc0\u10060  Invalid input, please try again.');\
    \}\
  \}\
\}\
\
// Check for winning condition\
bool checkWinner(List<String> board, String player) \{\
  List<List<int>> winPatterns = [\
    [0, 1, 2], [3, 4, 5], [6, 7, 8], // rows\
    [0, 3, 6], [1, 4, 7], [2, 5, 8], // columns\
    [0, 4, 8], [2, 4, 6]             // diagonals\
  ];\
\
  for (var pattern in winPatterns) \{\
    if (pattern.every((index) => board[index] == player)) \{\
      return true;\
    \}\
  \}\
  return false;\
\}\
\
// Check for draw\
bool isDraw(List<String> board) \{\
  return board.every((cell) => cell != ' ');\
\}\
}